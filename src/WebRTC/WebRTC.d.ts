import { PeerConnection } from "./PeerConnection";
import { WebRTCConnection } from "./WebRTCConnection";
import { DataChannel } from './DataChannel';
import { BandwidthConstraints } from "./BandwidthConstraints";
import { Controller } from "../Controller";
export declare class WebRTC {
    private brokerController;
    private rtcConfig;
    Peers: Map<string, WebRTCConnection>;
    Peer: RTCPeerConnection;
    DataChannels: Map<string, DataChannel>;
    LocalPeerId: string;
    Context: any;
    LocalStreams: Array<any>;
    Errors: Array<any>;
    bandwidthConstraints: BandwidthConstraints;
    OnError: (err: any) => void;
    OnContextCreated: (peerConnection: PeerConnection) => void;
    OnContextChanged: (context: {
        context: string;
        peerId: string;
    }) => void;
    OnRemoteTrack: (track: MediaStreamTrack, connection: WebRTCConnection) => void;
    OnLocalStream: (stream: MediaStream) => void;
    OnContextConnected: (webRTCConnection: WebRTCConnection, rtcPeerConnection: RTCPeerConnection) => void;
    OnContextDisconnected: (webRTCConnection: WebRTCConnection, rtcPeerConnection: RTCPeerConnection) => void;
    private onConnectTo;
    private onConnected;
    OnDisconnected(peerId: string): void;
    constructor(brokerController: Controller, rtcConfig: any);
    addTrackToPeers(track: MediaStreamTrack): void;
    setBandwithConstraints(videobandwidth: number, audiobandwidth: number): void;
    private setMediaBitrates;
    private setMediaBitrate;
    CreateDataChannel(name: string): DataChannel;
    RemoveDataChannel(name: string): void;
    private addError;
    private onCandidate;
    private onAnswer;
    private onOffer;
    AddLocalStream(stream: any): WebRTC;
    AddIceServer(iceServer: RTCIceServer): WebRTC;
    private removePeerConnection;
    private createPeerConnection;
    cleanUp(id: string): void;
    findPeerConnection(id: string): WebRTCConnection;
    reconnectAll(): Array<PeerConnection>;
    private getPeerConnection;
    private createOffer;
    Disconnect(): void;
    DisconnectPeer(id: string): void;
    Connect(peerConnections: Array<PeerConnection>): WebRTC;
    ChangeContext(context: string): WebRTC;
    private ConnectPeers;
    ConnectContext(): void;
}
