import { Controller } from '../Controller/Controller';
import { DataChannel } from '../DataChannels/DataChannel';
import { IE2EE } from '../E2EE/E2EEBase';
import { ContextConnection } from '../Models/ContextConnection';
import { ThorIOConnection } from '../Models/ThorIOConnection';
export declare class WebRTCFactory {
    private signalingController;
    private rtcConfig;
    peers: Map<string, ThorIOConnection>;
    peer: RTCPeerConnection | undefined;
    dataChannels: Map<string, DataChannel>;
    localPeerId: string | undefined;
    context: string;
    localStreams: Array<MediaStream>;
    e2ee: IE2EE | undefined;
    isEncrypted: boolean;
    onError: ((err: any) => (err: any) => void) | undefined;
    onContextCreated: ((peerConnection: ContextConnection) => void) | undefined;
    onContextChanged: ((context: {
        context: string;
        peerId: string;
    }) => void) | undefined;
    onRemoteAudioTrack: ((track: MediaStreamTrack, connection: ThorIOConnection, event: RTCTrackEvent) => void) | undefined;
    onRemoteVideoTrack: ((track: MediaStreamTrack, connection: ThorIOConnection, event: RTCTrackEvent) => void) | undefined;
    onRemoteTrack: ((track: MediaStreamTrack, connection: ThorIOConnection, event: RTCTrackEvent) => void) | undefined;
    onRemoteTrackLost: ((track: MediaStreamTrack, connection: ThorIOConnection, event: MediaStreamTrackEvent) => void) | undefined;
    onLocalStream: ((stream: MediaStream) => void) | undefined;
    onContextConnected: ((webRTCConnection: ThorIOConnection, rtcPeerConnection: RTCPeerConnection) => void) | undefined;
    onContextDisconnected: ((webRTCConnection: ThorIOConnection, rtcPeerConnection: RTCPeerConnection) => void) | undefined;
    private onConnectAll;
    private onConnected;
    onDisconnected(peerId: string): void;
    constructor(signalingController: Controller, rtcConfig: any, e2ee?: IE2EE);
    addTrackToPeers(track: MediaStreamTrack): void;
    removeTrackFromPeers(track: MediaStreamTrack): void;
    getRtpSenders(peerId: string): Array<RTCRtpSender> | undefined;
    getRtpReceivers(peerId: string): Array<RTCRtpReceiver>;
    private setMediaBitrate;
    createDataChannel(name: string): DataChannel;
    removeDataChannel(name: string): void;
    private addError;
    private onCandidate;
    private onAnswer;
    private onOffer;
    applyVideoConstraints(mtc: MediaTrackConstraints): Promise<any>;
    applyBandwithConstraints(bandwidth: number): void;
    addLocalStream(stream: MediaStream): WebRTCFactory;
    addIceServer(iceServer: RTCIceServer): WebRTCFactory;
    removePeerConnection(id: string): void;
    private createRTCPeerConnection;
    private cleanUp;
    findPeerConnection(id: string): ThorIOConnection | undefined;
    reconnectAll(): Array<ContextConnection>;
    private getOrCreateRTCPeerConnection;
    private createOffer;
    disconnect(): void;
    disconnectPeer(id: string): void;
    connect(peerConnections: Array<ContextConnection>): void;
    connectTo(peerConnection: ContextConnection): void;
    changeContext(context: string): WebRTCFactory;
    private connectPeers;
    connectContext(): void;
}
